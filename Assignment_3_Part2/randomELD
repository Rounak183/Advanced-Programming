module mux2(in0,in1,select,out);
	
	input in0,in1,select;
	output out;
	wire s0,s1,w1;

	not (s0,select);
	and (w0,s0,in0),
		(w1,select,in1);
	or (out,w0,w1);

endmodule

module mux4(in0,in1,in2,in3,select,out);
	input in0,in1,in2,in3;
	input [1:0] select;
	output out;
	wire w0,w1;

	mux2
		mo(.select(select[0]),.in0(in0),.in1(in1),.out(w0));
		m1(.select(select[0]),.in0(in2),.in1(in3),.out(w1));
		m2(.select(select[1]),.in0(w0),.in1(w1),.out(out));

endmodule

module mux2(in0,in1,select,out);
	
	input in0,in1,select;
	output out;
	wire s0,w0,w1;

	not (s0,select);
	and (w0,s0,in0),
		(w1,select,in1);
	or (out,w0,w1);

endmodule

module (
	input G,
	input D,
	input CLR,
	output reg Q
	);

	always @(*)
	begin
		if (CLR)
			Q=0;
		else if (G)
			Q=D;
	end
endmodule

module my_module(my_input_port,my_inout_port,my_output_port);
	input [4:0] my_input_port;
	inout my_inout_port;
	output wire [14:0] my_output_port;
endmodule

module mux2(in0.in1,select,out);
	input in0,in1,select;
	output out;
	wire s0,w0,w1;

	not (s0,select);
	and (w0,s0,in0),
		(w1,select,in1);
	or (out,w0,w1);
endmodule


module mux2(in0,in1,select,out);
	input in0,in1,select;
	output out;

	if (select)
		out=in1;
	else
		out=in0;
endmodule

module mux8(
	input [7:0] inp,
	input [2:0] select,
	output [5:0] out,
	output result
	);

	wire w0,w1,w2,w3,w4,w5;

	mux2
		mo0(.in0(inp[0]),.in1(inp[1]),.select(select[0]),.out(out[0])),
		mo1(.in0(inp[2]),.in1(inp[3]),.select(select[0]),.out(out[1])),
		mo2(.in0(inp[4]),.in1(inp[5]),.select(select[0]),.out(out[2])),
		mo3(.in0(inp[6]),.in1[inp[7]),.select(select[0]),.out(out[3])),
		mo4(.in0(out[0]),.in1(out[1]),.select(select[1]),.out(out[4])),
		mo5(.in0(out[2]),.in1(out[3]),.select(select[1]),.out(out[5])),
		mo6(.in0(out[4]),.in1(out[5]),.select[select[2]),.out(result));

module test_1(
	input [3:0] in_1,
	input [3:0] in_2,
	input sel,
	output integer [3:0] out_1
	);

net or reg data types can be declared as vectors(multiple bit width),

reg [11:0] counter;
reg a;
reg [2:0] b;
a=counter[7];
b=counter[4:2];

reg [3:0] addr;

wire [-3:4] data;

reg [31:0] address;
address=32'd3;

Programmable Logic Devices
